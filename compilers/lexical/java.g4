lexer grammar java;
Identifier: ;
Input_Character: ;
Escape_Character: ;

Compilation_Unit: Package_Declaration? Import_Declarations? Type_Declarations?;
Package_Declaration: 'package' Package_Name ;
Import_Declarations: Import_Declaration | Import_Declarations Import_Declaration;
Import_Declaration: Single_Type_Import | Type_Import_On_Demand;
Single_Type_Import: 'import'(Type_Name);
Type_Import_On_Demand: 'import' Package_Name '. *' ;
Type_Declarations: Type_Declaration | Type_Declarations Type_Declaration;
Type_Declaration: Class_Declaration | Interface_Declaration | ;
Class_Declaration: Class_Modifiers? 'class' Identifier Super? Interfaces? Class_Body;
Class_Modifiers: Class_Modifier | Class_Modifiers Class_Modifier;
Class_Modifier: 'public' | 'abstract' | 'final';
Super: 'extends' Class_Type;
Interfaces: 'implements' Interface_Type_List;
Interface_Type_List: Interface_Type | Interface_Type_List ',' Interface_Type;
Class_Body: '{' Class_Body_Declarations? '}';
Class_Body_Declarations: Class_Body_Declaration | Class_Body_Declarations Class_Body_Declaration;
Class_Body_Declaration: Class_Member_Declaration | Static_Initializer | Constructor_Declaration;
Class_Member_Declaration: Field_Declaration | Method_Declaration;
Static_Initializer: 'static' Block;
Constructor_Declaration: Constructor_Modifiers? Constructor_Declarator Throws? Constructor_Body;
Constructor_Modifiers: Constructor_Modifier | Constructor_Modifiers Constructor_Modifier;
Constructor_Modifier: 'public' | 'protected' | 'private';
Constructor_Declarator: Simple_Type_Name ( Formal_Parameter_List? );
Formal_Parameter_List: Formal_Parameter | Formal_Parameter_List ',' Formal_Parameter;
Formal_Parameter: Type Variable_Declarator_Id;
Throws: 'throws' Class_Type_List;
Class_Type_List: Class_Type | Class_Type_List ',' Class_Type;
Constructor_Body: { Explicit_Constructor_Invocation? Block_Statements? };
Explicit_Constructor_Invocation: 'this' ( Argument_List? ) | 'super' ( Argument_List? );
Field_Declaration: Field_Modifiers? Type Variable_Declarators;
Field_Modifiers: Field_Modifier | Field_Modifiers Field_Modifier;
Field_Modifier: 'public' | 'protected' | 'private' | 'static' | 'final' | 'transient' | 'volatile';
Variable_Declarators: Variable_Declarator | Variable_Declarators ',' Variable_Declarator;
Variable_Declarator: Variable_Declarator_Id | Variable_Declarator_Id = Variable_Initializer;
Variable_Declarator_Id: Identifier | Variable_Declarator_Id [ ];
Variable_Initializer: Expression | Array_Initializer;
Method_Declaration: Method_Header Method_Body;
Method_Header: Method_Modifiers? Result_Type Method_Declarator Throws?;
Result_Type: Type | 'void';
Method_Modifiers: Method_Modifier | Method_Modifiers Method_Modifier;
Method_Modifier: 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'synchronized' | 'native';
Method_Declarator: Identifier ( Formal_Parameter_List? );
Method_Body: Block | ;
Interface_Declaration: Interface_Modifiers? 'interface' Identifier Extends_Interfaces? Interface_Body;
Interface_Modifiers: Interface_Modifier | Interface_Modifiers Interface_Modifier;
Interface_Modifier: 'public' | 'abstract';
Extends_Interfaces: 'extends' Interface_Type | Extends_Interfaces ',' Interface_Type;
Interface_Body: { Interface_Member_Declarations? };
Interface_Member_Declarations: Interface_Member_Declaration | Interface_Member_Declarations Interface_Member_Declaration;
Interface_Member_Declaration: Constant_Declaration | Abstract_Method_Declaration;
Constant_Declaration: Constant_Modifiers Type Variable_Declarator;
Constant_Modifiers: 'public' | 'static' | 'final';
Abstract_Method_Declaration: Abstract_Method_Modifiers? Result_Type Method_Declarator Throws? ;
Abstract_Method_Modifiers: Abstract_Method_Modifier | Abstract_Method_Modifiers Abstract_Method_Modifier;
Abstract_Method_Modifier: 'public' | 'abstract';
Array_Initializer: { Variable_Initializers? ',' ? };
Variable_Initializers: Variable_Initializer | Variable_Initializers ',' Variable_Initializer;
Type: Primitive_Type | Reference_Type;
Primitive_Type: Numeric_Type | 'boolean';
Numeric_Type: Integral_Type | Floating_Type;
Integral_Type: 'byte' | 'short' | 'int' | 'long' | 'char';
Floating_Type: 'float' | 'double';
Reference_Type: Class_Interface_Type | Array_Type;
Class_Interface_Type: Class_Type | Interface_Type;
Class_Type: Type_Name;
Interface_Type: Type_Name;
Array_Type: Type [ ];
Block: { Block_Statements? };
Block_Statements: Block_Statement | Block_Statements Block_Statement;
Block_Statement: Local_Variable_Declaration_St | Statement;
Local_Variable_Declaration_St: Local_Variable_Declaration;
Local_Variable_Declaration: Type Variable_Declarators;
Statement: Statement_No_Trailing_Substatement | Labeled_Statement | If_Then_Statement | If_Then_Else_Statement | While_Statement | For_Statement;
Statement_No_Short_If: Statement_No_Trailing_Substatement | Labeled_Statement_No_Short_If | If_Then_Else_Statement_No_Short_If | While_Statement_No_Short_If | For_Statement_No_Short_If;
Statement_No_Trailing_Substatement: Block | Empty_Statement | Expression_Statement | Switch_Statement | Do_Statement | Break_Statement | Continue_Statement | Return_Statement | Synchronized_Statement | Throws_Statement | Try_Statement;
Empty_Statement: ;
Labeled_Statement: Identifier ':' Statement;
Labeled_Statement_No_Short_If: Identifier ':' Statement_No_Short_If;
Expression_Statement: Statement_Expression ;
Statement_Expression: Assignment | Preincrement_Expression | Postincrement_Expression | Predecrement_Expression | Postdecrement_Expression | Method_Invocation | Class_Instance_Creation_Expression;
If_Then_Statement: 'if' ( Expression ) Statement;
If_Then_Else_Statement: 'if' ( Expression ) Statement_No_Short_If 'else' Statement;
If_Then_Else_Statement_No_Short_If: 'if' ( Expression ) Statement_No_Short_If 'else' Statement_No_Short_If;
Switch_Statement: 'switch' ( Expression ) Switch_Block;
Switch_Block: { Switch_Block_Statement_Groups? Switch_Labels? };
Switch_Block_Statement_Groups: Switch_Block_Statement_Group | Switch_Block_Statement_Groups Switch_Block_Statement_Group;
Switch_Block_Statement_Group: Switch_Labels Block_Statements;
Switch_Labels: Switch_Label | Switch_Labels Switch_Label;
Switch_Label: 'case' Constant_Expression ':' | 'default' ':';
While_Statement: 'while' ( Expression ) Statement;
While_Statement_No_Short_If: 'while' ( Expression ) Statement_No_Short_If;
Do_Statement: 'do' Statement 'while' ( Expression );
For_Statement: 'for' ( For_Init? ';' Expression? ';' For_Update? ) Statement;
For_Statement_No_Short_If: 'for' ( For_Init? ';' Expression? ';' For_Update? ) Statement_No_Short_If;
For_Init: Statement_Expression_List | Local_Variable_Declaration;
For_Update: Statement_Expression_List;
Statement_Expression_List: Statement_Expression | Statement_Expression_List ',' Statement_Expression;
Break_Statement: 'break' Identifier?;
Continue_Statement: 'continue' Identifier?;
Return_Statement: 'return' Expression?;
Throws_Statement: 'throw' Expression;
Synchronized_Statement: 'synchronized' ( Expression ) Block;
Try_Statement: 'try' Block Catches | 'try' Block Catches? Finally;
Catches: Catch_Clause | Catches Catch_Clause;
Catch_Clause: 'catch' ( Formal_Parameter ) Block;
Finally: 'finally' Block;
Constant_Expression: Expression;
Expression: Assignment_Expression;
Assignment_Expression: Conditional_Expression | Assignment;
Assignment: Left_hand_Side Assignment_Operator Assignment_Expression;
Left_hand_Side: Expression_Name | Field_Access | Array_Access;
Assignment_Operator: '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '>>>=' | '&=' | '^=' | '|=';
Conditional_Expression: Conditional_Or_Expression | Conditional_Or_Expression ? Expression ':' Conditional_Expression;
Conditional_Or_Expression: Conditional_And_Expression | Conditional_Or_Expression '||' Conditional_And_Expression;
Conditional_And_Expression: Inclusive_Or_Expression | Conditional_And_Expression '&&' Inclusive_Or_Expression;
Inclusive_Or_Expression: Exclusive_Or_Expression | Inclusive_Or_Expression | Exclusive_Or_Expression;
Exclusive_Or_Expression: And_Expression | Exclusive_Or_Expression '^' And_Expression;
And_Expression: Equality_Expression | And_Expression '&' Equality_Expression;
Equality_Expression: Relational_Expression | Equality_Expression '==' Relational_Expression | Equality_Expression '!=' Relational_Expression;
Relational_Expression: Shift_Expression | Relational_Expression '<' Shift_Expression | Relational_Expression '>' Shift_Expression | Relational_Expression '<=' Shift_Expression | Relational_Expression '>=' Shift_Expression | Relational_Expression 'instanceof' Reference_Type;
Shift_Expression: Additive_Expression | Shift_Expression '<<' Additive_Expression | Shift_Expression '>>' Additive_Expression | Shift_Expression '>>>' Additive_Expression;
Additive_Expression: Multiplicative_Expression | Additive_Expression '+' Multiplicative_Expression | Additive_Expression '-' Multiplicative_Expression;
Multiplicative_Expression: Unary_Expression | Multiplicative_Expression '*' Unary_Expression | Multiplicative_Expression '/' Unary_Expression | Multiplicative_Expression '%' Unary_Expression;
Cast_Expression: '(' Primitive_Type ')' Unary_Expression | '(' Reference_Type ')' Unary_Expression_Not_Plus_Minus;
Unary_Expression: Preincrement_Expression | Predecrement_Expression | '+' Unary_Expression | '-' Unary_Expression | Unary_Expression_Not_Plus_Minus;
Predecrement_Expression: '--' Unary_Expression;
Preincrement_Expression: '++' Unary_Expression;
Unary_Expression_Not_Plus_Minus: Postfix_Expression | '~' Unary_Expression | '!' Unary_Expression | Cast_Expression;
Postdecrement_Expression: Postfix_Expression '--';
Postincrement_Expression: Postfix_Expression '++';
Postfix_Expression: Primary | Expression_Name | Postincrement_Expression | Postdecrement_Expression;
Method_Invocation: Method_Name '(' Argument_List? ')' | Primary '.' Identifier '(' Argument_List? ')' | 'super' '.' Identifier '(' Argument_List? ')';
Field_Access: Primary '.' Identifier | 'super' '.' Identifier;
Primary: Primary_No_New_Array | Array_Creation_Expression;
Primary_No_New_Array: Literal | 'this' | '(' Expression ')' | Class_Instance_Creation_Expression | Field_Access | Method_Invocation | Array_Access;
Class_Instance_Creation_Expression: 'new' Class_Type '(' Argument_List? ')';
Argument_List: Expression | Argument_List ',' Expression;
Array_Creation_Expression: 'new' Primitive_Type Dim_Exprs Dims? | 'new' Class_Interface_Type Dim_Exprs Dims?;
Dim_Exprs: Dim_Expr | Dim_Exprs Dim_Expr;
Dim_Expr: '[' Expression ']';
Dims: '[ ]' | Dims '[ ]';
Array_Access: Expression_Name '[' Expression ']' | Primary_No_New_Array '[' Expression']';
Package_Name: Identifier | Package_Name '.' Identifier;
Type_Name: Identifier | Package_Name '.' Identifier;
Simple_Type_Name: Identifier;
Expression_Name: Identifier | Ambiguous_Name '.' Identifier;
Method_Name: Identifier | Ambiguous_Name '.' Identifier;
Ambiguous_Name: Identifier | Ambiguous_Name '.' Identifier;
Literal: Integer_Literal | Floating_point_Literal | Boolean_Literal | Character_Literal | String_Literal | Null_Literal;
Integer_Literal: Decimal_Integer_Literal | Hex_Integer_Literal | Octal_Integer_Literal;
Decimal_Integer_Literal: Decimal_Numeral Integer_Type_Suffix?;
Hex_Integer_Literal: Hex_Numeral Integer_Type_Suffix?;
Octal_Integer_Literal: Octal_Numeral Integer_Type_Suffix?;
Integer_Type_Suffix: 'l' | 'L';
Decimal_Numeral: '0' | Non_Zero_Digit Digits?;
Digits: Digit | Digits Digit;
Digit: '0' | Non_Zero_Digit;
Non_Zero_Digit: '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9';
Hex_Numeral: '0' 'x' Hex_Digit | '0' 'X' Hex_Digit | Hex_Numeral Hex_Digit;
Hex_Digit : '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F';
Octal_Numeral: '0' Octal_Digit | Octal_Numeral Octal_Digit;
Octal_Digit: '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7';
Floating_point_Literal: Digits '.' Digits? Exponent_Part? Float_Type_Suffix? Digits Exponent_Part? Float_Type_Suffix?;
Exponent_Part: Exponent_Indicator Signed_Integer;
Exponent_Indicator: 'e' | 'E';
Signed_Integer: Sign? Digits;
Sign: '+' | '-';
Float_Type_Suffix: 'f' | 'F' | 'd' | 'D';
Boolean_Literal: 'true' | 'false';
Character_Literal: ;//' Single_Character ' | ' <escape sequence> ';
Single_Character: ; //Input_Character except ' and \
String_Literal: ;//" String_Characters?"
String_Characters: String_Character | String_Characters String_Character;
String_Character: Input_Character | Escape_Character; //except " and \ 
Null_Literal: 'null';
Keyword: 'abstract' | 'boolean' | 'break' | 'byte' | 'case' | 'catch' | 'char' | 'class' | 'const' | 'continue' | 'default' | 'do' | 'double' | 'else' | 'extends' | 'final' | 'finally' | 'float' | 'for' | 'goto' | 'if' | 'implements' | 'import' | 'instanceof' | 'int' | 'interface' | 'long' | 'native' | 'new' | 'package' | 'private' | 'protected' | 'public' | 'return' | 'short' | 'static' | 'super' | 'switch' | 'synchronized' | 'this' | 'throw' | 'throws' | 'transient' | 'try' | 'void' | 'volatile' | 'while';